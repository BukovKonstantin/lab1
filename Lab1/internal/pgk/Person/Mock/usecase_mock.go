// Code generated by MockGen. DO NOT EDIT.
// Source: interface_for_usecase.go

// Package mock_Person is a generated GoMock package.
package mock_Person

import (
	model_of_person "Lab1/internal/pgk/model_of_person"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockForUsecase is a mock of ForUsecase interface
type MockForUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockForUsecaseMockRecorder
}

// MockForUsecaseMockRecorder is the mock recorder for MockForUsecase
type MockForUsecaseMockRecorder struct {
	mock *MockForUsecase
}

// NewMockForUsecase creates a new mock instance
func NewMockForUsecase(ctrl *gomock.Controller) *MockForUsecase {
	mock := &MockForUsecase{ctrl: ctrl}
	mock.recorder = &MockForUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForUsecase) EXPECT() *MockForUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockForUsecase) Create(arg0 *model_of_person.PersonRequest) (uint, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockForUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockForUsecase)(nil).Create), arg0)
}

// Read mocks base method
func (m *MockForUsecase) Read(arg0 uint) (*model_of_person.PersonResponse, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*model_of_person.PersonResponse)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockForUsecaseMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockForUsecase)(nil).Read), arg0)
}

// ReadAll mocks base method
func (m *MockForUsecase) ReadAll() ([]*model_of_person.PersonResponse, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]*model_of_person.PersonResponse)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockForUsecaseMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockForUsecase)(nil).ReadAll))
}

// Update mocks base method
func (m *MockForUsecase) Update(arg0 uint, arg1 *model_of_person.PersonRequest) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockForUsecaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockForUsecase)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *MockForUsecase) Delete(arg0 uint) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockForUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockForUsecase)(nil).Delete), arg0)
}
